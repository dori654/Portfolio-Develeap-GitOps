apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kibana
  namespace: argocd
spec:
  project: default
  source:
    chart: kibana
    repoURL: https://helm.elastic.co
    targetRevision: 8.5.1
    helm:
      releaseName: kibana
      values: |
        # Basic configuration
        replicas: 1
        
        # Resource limits
        resources:
          requests:
            cpu: "100m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        
        # Service configuration - Use ClusterIP for single load balancer approach
        service:
          type: ClusterIP
          port: 5601
        
        # Ingress configuration
        ingress:
          enabled: true
          className: nginx
          annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          hosts:
            - host: kibana.cat-agency.local
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: kibana-tls
              hosts:
                - kibana.cat-agency.local
        
        # Kibana configuration
        kibanaConfig:
          kibana.yml: |
            server.host: 0.0.0.0
            server.port: 5601
            server.name: kibana
            server.ssl.enabled: true
            server.ssl.certificate: /usr/share/kibana/config/certs/tls.crt
            server.ssl.key: /usr/share/kibana/config/certs/tls.key
            
            elasticsearch.hosts: ["https://elasticsearch-master.logging.svc.cluster.local:9200"]
            elasticsearch.ssl.verificationMode: none
            elasticsearch.username: elastic
            elasticsearch.password: ${ELASTICSEARCH_PASSWORD}
            
            # Security settings
            xpack.security.enabled: true
            xpack.security.encryptionKey: "something_at_least_32_characters_long"
            xpack.security.session.idleTimeout: "1h"
            xpack.security.session.lifespan: "30d"
            
            # Monitoring
            xpack.monitoring.ui.container.elasticsearch.enabled: true
            
            # Logging configuration
            logging.appenders.default:
              type: console
              layout:
                type: json
            logging.root.appenders: [default]
            logging.loggers:
              - name: elasticsearch.query
                level: info
        
        # Environment variables
        extraEnvs:
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: password
          - name: NODE_OPTIONS
            value: "--max-old-space-size=768"
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
        
        # SSL certificates
        secretMounts:
          - name: kibana-certificates
            secretName: kibana-certificates
            path: /usr/share/kibana/config/certs
        
        # Health checks
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
            scheme: HTTPS
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
            scheme: HTTPS
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
        
        # Pod annotations for monitoring
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "5601"
          prometheus.io/path: "/api/stats"
        
        # Horizontal Pod Autoscaler (optional)
        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 3
          targetCPUUtilizationPercentage: 80
        
        # Node selector and tolerations
        nodeSelector: {}
        tolerations: []
        affinity: {}
        
  destination:
    server: https://kubernetes.default.svc
    namespace: logging
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
