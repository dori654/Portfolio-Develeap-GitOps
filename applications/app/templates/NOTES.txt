üê± Cat Agency Application Successfully Deployed! üê±

1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.frontend.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "app.fullname" . }}-frontend)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.frontend.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "app.fullname" . }}-frontend'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "app.fullname" . }}-frontend --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.frontend.service.port }}
{{- else if contains "ClusterIP" .Values.frontend.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "app.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=frontend" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Backend API is available at:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  {{- if eq .backend "backend" }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
  {{- end }}
{{- end }}
{{- else }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "app.fullname" . }}-backend {{ .Values.backend.service.port }}:{{ .Values.backend.service.port }}
  Then access the API at: http://127.0.0.1:{{ .Values.backend.service.port }}
{{- end }}

3. MongoDB is accessible within the cluster at:
{{- if .Values.mongodb.enabled }}
  {{ include "app.fullname" . }}-mongodb:{{ .Values.mongodb.service.port }}
{{- else }}
  External MongoDB (configured via MONGODB_URI environment variable)
{{- end }}

4. Application components deployed:
   - Frontend: {{ .Values.frontend.replicaCount }} replicas
   - Backend: {{ .Values.backend.replicaCount }} replicas
{{- if .Values.mongodb.enabled }}
   - MongoDB: {{ .Values.mongodb.replicaCount }} replica(s)
{{- end }}

5. Autoscaling:
{{- if .Values.autoscaling.frontend.enabled }}
   - Frontend HPA: {{ .Values.autoscaling.frontend.minReplicas }}-{{ .Values.autoscaling.frontend.maxReplicas }} replicas
{{- end }}
{{- if .Values.autoscaling.backend.enabled }}
   - Backend HPA: {{ .Values.autoscaling.backend.minReplicas }}-{{ .Values.autoscaling.backend.maxReplicas }} replicas
{{- end }}

6. To check the status of your deployment:
   kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

7. To view application logs:
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=backend -f
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=frontend -f
